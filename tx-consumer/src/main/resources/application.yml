server:
  port: 8087

spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: tx-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.acme.txconsumer.*
        spring.json.value.default.type: com.acme.txconsumer.model.TransactionEvent
        spring.json.use.type.headers: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
  # IMPORTANT: we will provide our own CqlSession; keep Data auto-config on
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration

  cassandra:
    # Spring Data will use the provided session; schema-action still applies
    schema-action: create_if_not_exists

app:
  kafka:
    topic: tx.events

  consumer:
    concurrency: 2

  cassandra:
    host: 127.0.0.1     # avoid IPv6 localhost â†’ DC mismatch warnings
    port: 9042
    local-dc: datacenter1
    keyspace: txks
    replication:
      class: SimpleStrategy
      rf: 1
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      service: tx-consumer
